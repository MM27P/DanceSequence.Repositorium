// <auto-generated />
using EFGetStarted;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DanceSequence.Database.Migrations
{
    [DbContext(typeof(DSContext))]
    [Migration("20210206180614_NewNewOrder")]
    partial class NewNewOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("DanceSequence.Database.Models.Alternation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MoveId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MoveId");

                    b.ToTable("Alternation");
                });

            modelBuilder.Entity("DanceSequence.Database.Models.Dance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Dances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Zouk",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachata",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Swing",
                            Type = 1
                        });
                });

            modelBuilder.Entity("DanceSequence.Database.Models.Many2Many.FollowingMove", b =>
                {
                    b.Property<int>("PreMoveId")
                        .HasColumnType("int");

                    b.Property<int>("PostMoveId")
                        .HasColumnType("int");

                    b.HasKey("PreMoveId", "PostMoveId");

                    b.HasIndex("PostMoveId");

                    b.ToTable("FollowingMoves");
                });

            modelBuilder.Entity("DanceSequence.Database.Models.Move", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DanceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DanceId");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("DanceSequence.Database.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DanceSequence.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "Admin",
                            Password = "P@ssw0rd"
                        });
                });

            modelBuilder.Entity("MoveTag", b =>
                {
                    b.Property<int>("MovesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("MovesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("MoveTag");
                });

            modelBuilder.Entity("DanceSequence.Database.Models.Alternation", b =>
                {
                    b.HasOne("DanceSequence.Database.Models.Move", "Move")
                        .WithMany("Alternates")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Move");
                });

            modelBuilder.Entity("DanceSequence.Database.Models.Many2Many.FollowingMove", b =>
                {
                    b.HasOne("DanceSequence.Database.Models.Move", "PostMove")
                        .WithMany("PreMoves")
                        .HasForeignKey("PostMoveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DanceSequence.Database.Models.Move", "PreMove")
                        .WithMany("ProMoves")
                        .HasForeignKey("PreMoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostMove");

                    b.Navigation("PreMove");
                });

            modelBuilder.Entity("DanceSequence.Database.Models.Move", b =>
                {
                    b.HasOne("DanceSequence.Database.Models.Dance", "Dance")
                        .WithMany("Moves")
                        .HasForeignKey("DanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dance");
                });

            modelBuilder.Entity("MoveTag", b =>
                {
                    b.HasOne("DanceSequence.Database.Models.Move", null)
                        .WithMany()
                        .HasForeignKey("MovesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceSequence.Database.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DanceSequence.Database.Models.Dance", b =>
                {
                    b.Navigation("Moves");
                });

            modelBuilder.Entity("DanceSequence.Database.Models.Move", b =>
                {
                    b.Navigation("Alternates");

                    b.Navigation("PreMoves");

                    b.Navigation("ProMoves");
                });
#pragma warning restore 612, 618
        }
    }
}
